{
  "version": 3,
  "sources": [
    "utils/auth.js",
    "utils/queries.js",
    "utils/localStorage.js",
    "pages/SearchBooks.js",
    "utils/API.js",
    "pages/SavedBooks.js",
    "components/SignupForm.js",
    "components/LoginForm.js",
    "components/Navbar.js",
    "App.js",
    "index.js"
  ],
  "names": [
    "decode",
    "this",
    "getToken",
    "token",
    "isTokenExpired",
    "exp",
    "Date",
    "now",
    "err",
    "localStorage",
    "getItem",
    "idToken",
    "setItem",
    "window",
    "location",
    "assign",
    "removeItem",
    "getMe",
    "gql",
    "signUpMutation",
    "loginUser",
    "saveBookMutation",
    "deleteBookMutation",
    "removeBookId",
    "bookId",
    "savedBookIds",
    "JSON",
    "parse",
    "updatedSavedBookIds",
    "filter",
    "savedBookId",
    "stringify",
    "SearchBooks",
    "useState",
    "searchedBooks",
    "setSearchedBooks",
    "searchInput",
    "setSearchInput",
    "setSavedBookIds",
    "useMutation",
    "saveBook",
    "data",
    "useEffect",
    "bookIdArr",
    "length",
    "handleFormSubmit",
    "event",
    "a",
    "preventDefault",
    "fetch",
    "response",
    "ok",
    "Error",
    "json",
    "items",
    "bookData",
    "map",
    "book",
    "id",
    "authors",
    "volumeInfo",
    "title",
    "description",
    "image",
    "imageLinks",
    "thumbnail",
    "console",
    "error",
    "handleSaveBook",
    "log",
    "bookToSave",
    "find",
    "Auth",
    "loggedIn",
    "variables",
    "Jumbotron",
    "className",
    "Container",
    "Form",
    "onSubmit",
    "Row",
    "Col",
    "xs",
    "md",
    "Control",
    "name",
    "value",
    "onChange",
    "e",
    "target",
    "type",
    "size",
    "placeholder",
    "Button",
    "variant",
    "CardColumns",
    "Card",
    "key",
    "border",
    "Img",
    "src",
    "alt",
    "Body",
    "Title",
    "Text",
    "disabled",
    "some",
    "onClick",
    "SavedBooks",
    "useQuery",
    "loading",
    "deleteBook",
    "handleDeleteBook",
    "class",
    "role",
    "fluid",
    "me",
    "savedBooks",
    "SignupForm",
    "username",
    "email",
    "password",
    "userFormData",
    "setUserFormData",
    "validated",
    "showAlert",
    "setShowAlert",
    "createUser",
    "login",
    "signUp",
    "handleInputChange",
    "currentTarget",
    "checkValidity",
    "stopPropagation",
    "noValidate",
    "Alert",
    "dismissible",
    "onClose",
    "show",
    "Group",
    "Label",
    "htmlFor",
    "required",
    "Feedback",
    "LoginForm",
    "user",
    "AppNavbar",
    "showModal",
    "setShowModal",
    "Navbar",
    "bg",
    "expand",
    "Brand",
    "as",
    "Link",
    "to",
    "icon",
    "faBook",
    "Toggle",
    "aria-controls",
    "Collapse",
    "Nav",
    "logout",
    "Modal",
    "onHide",
    "aria-labelledby",
    "Tab",
    "defaultActiveKey",
    "Header",
    "closeButton",
    "Item",
    "eventKey",
    "Content",
    "Pane",
    "handleModalClose",
    "faUser",
    "getProfile",
    "App",
    "httpLink",
    "HttpLink",
    "uri",
    "authMiddleware",
    "ApolloLink",
    "operation",
    "forward",
    "setContext",
    "headers",
    "authorization",
    "client",
    "ApolloClient",
    "cache",
    "InMemoryCache",
    "link",
    "concat",
    "ApolloProvider",
    "exact",
    "path",
    "component",
    "render",
    "ReactDOM",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.df3040aa.chunk.js",
  "sourcesContent": [
    "// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n",
    "import { gql } from \"@apollo/client\";\n\nexport const getMe = gql`\n  query getMe {\n    me {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        description\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n\nexport const signUpMutation = gql`\n  mutation signUp($username: String!, $email: String!, $password: String!) {\n    signUp(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        email\n        username\n      }\n    }\n  }\n`;\n\n\n\n// mutation queries to GraphQl\nexport const loginUser = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n        email\n        savedBooks {\n          authors\n          description\n          bookId\n          image\n          link\n          title\n        }\n      }\n    }\n  }\n`;\n\nexport const saveBookMutation = gql`\n  mutation saveBook($bookToSave: BookToSave!) {\n    saveBook(book: $bookToSave) {\n      _id\n      username\n      email\n      savedBooks {\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n\nexport const deleteBookMutation = gql`\n  mutation deleteBook($bookId: String!) {\n    deleteBook(bookId: $bookId) {\n      _id\n      username\n      email\n      savedBooks {\n        authors\n        description\n        bookId\n        image\n        link\n        title\n      }\n    }\n  }\n`;\n",
    "export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n",
    "import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport { useMutation } from \"@apollo/client\";\nimport \"./style.css\";\n\nimport Auth from \"../utils/auth\";\nimport { saveBookMutation } from \"../utils/queries\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // use mutation to save a book to the user listen\n  const [saveBook, { data }] = useMutation(saveBookMutation);\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    return () => saveBookIds(savedBookIds);\n  }, [data]);\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    console.log(\"bookId\", bookId);\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n    try {\n      const { data } = await saveBook({\n        variables: { bookToSave: bookToSave },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron className=\"text-light bg-dark\">\n        <Container>\n          <p className=\"display-4 text-center\">Search for Books!</p>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Book's name\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} className=\"cardBody\" border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className={\n                        savedBookIds?.some(\n                          (savedBookId) => savedBookId === book.bookId\n                        )\n                          ? \"btn-block btn-success\"\n                          : \"btn-block btn-info\"\n                      }\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"❤️ Saved to favourite!\"\n                        : \"➕ Add this Book to favourite!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n",
    "// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n",
    "import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport \"./style.css\";\nimport { getMe, deleteBookMutation } from \"../utils/queries\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nconst SavedBooks = () => {\n  const [userData, setUserData] = useState({});\n  const { data, loading } = useQuery(getMe);\n  const [deleteBook, { data: deleteBookData }] =\n    useMutation(deleteBookMutation);\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n  const handleDeleteBook = async (bookId) => {\n    try {\n      const { data } = await deleteBook({ variables: { bookId } });\n  \n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return (\n      <div class=\"spinner-border\" role=\"status\">\n        <span class=\"sr-only\">Loading...</span>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <button className=\"btn-lg disabled  px-4 py-2 w-100\">\n            Your favourite Books{\" \"}\n            <span className=\"badge badge-danger display-2\">\n              {data.me.savedBooks.length}\n            </span>\n          </button>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <CardColumns className=\"bg-info p-3 \">\n          {data.me.savedBooks.map((book) => {\n            return (\n              <Card\n                key={book.bookId}\n                border=\"dark\"\n                className=\"view overlay zoom cardBody\"\n              >\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    🗑️ Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n",
    "import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\nimport { signUpMutation } from \"../utils/queries\";\n\nimport { useMutation } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  //Mutation request to crteate a user\n  const [createUser, { data }] = useMutation(signUpMutation);\n\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    Auth.login(data.signUp.token);\n  }, [data]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({ variables: { ...userFormData } });\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n",
    "// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\nimport { loginUser } from \"../utils/queries\";\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const response = await loginUser(userFormData);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { token, user } = await response.json();\n      console.log(user);\n      Auth.login(token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n",
    "import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBook } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            <p className=\"flex flex-wrap \">\n              {\" \"}\n              <FontAwesomeIcon icon={faBook} className=\"text-primary \" />{\" \"}\n              <span className=\"text-warning \"> Google Books Search</span>\n            </p>\n          </Navbar.Brand>\n\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n      {Auth.loggedIn() ? (\n        <h4 className=\"px-3 bg-dark text-center\">\n          <FontAwesomeIcon icon={faUser} className=\"text-danger ml-4\" />{\" \"}\n          <span className=\"text-white \">{Auth.getProfile().data.username}</span>{\" \"}\n        </h4>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n};\n\nexport default AppNavbar;\n",
    "import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport {\n  ApolloProvider,\n  ApolloLink,\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  concat,\n} from \"@apollo/client\";\n\nimport Auth from \"./utils/auth\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App() {\n  const httpLink = new HttpLink({ uri: \"/graphql\" });\n  const authMiddleware = new ApolloLink((operation, forward) => {\n    // add the authorization to the headers\n    operation.setContext(({ headers = {} }) => ({\n      headers: {\n        ...headers,\n        authorization: Auth.loggedIn() ? Auth.getToken() : null,\n      },\n    }));\n\n    return forward(operation);\n  });\n\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: concat(authMiddleware, httpLink),\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={SearchBooks} />\n            <Route exact path=\"/saved\" component={SavedBooks} />\n            <Route render={() => <h1 className=\"display-2\">Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\nexport default App;\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"
  ],
  "sourceRoot": ""
}
